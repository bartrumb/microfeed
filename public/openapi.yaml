openapi: "3.1.0"
info:
  version: "__MICROFEED_VERSION__"
  title: "microfeed api"
  description: |
    Allows to use microfeed as a headless cms or integrate with external services like Zapier.
    Using the microfeed api, you can programmatically create, update, delete items, and update the channel metadata.
  termsOfService: "https://github.com/microfeed/microfeed/blob/main/LICENSE"
  contact:
    name: "Listen Notes, Inc."
    url: "https://www.microfeed.org"
    email: "support@microfeed.org"
servers:
  - url: "__BASE_URL__"
    description: API Production Server
tags:
  - name: Feed API
    description: |
      Read-only endpoints to fetch the jsonfeed and individual items.
      Anyone can use Feed API endpoints without authentication.
      In other words, these endpoints are public.
      You can disable Feed API endpoints at __BASE_URL__/admin/settings/ -
      toggle "Visible" of "JSON" in the "Subscribe methods" section.
  - name: Admin API
    description: |
      Endpoints to do CRUD operations on the microfeed instance, e.g.,
      create a new item, update an existing item, delete an item, upload media files...
      You need to use your microfeed instance's API key to access these endpoints.
      You can find your microfeed instance's API key at the API section of __BASE_URL__/admin/settings/.
paths:
  /json:
    get:
      tags:
        - Feed API
      summary: Fetches json for a feed
      description: |
        Fetches json data for a feed, including channel metadata and a list of items.
        The response data is in JSON feed format. For the formal JSON feed definition,
        please see https://www.jsonfeed.org/version/1.1/
        The response data can also be used as variables in the Web Feed mustache template at
        /admin/settings/code-editor/?type=themes&theme=custom#webFeed
      operationId: fetchFeedJson
      parameters:
        - name: next_cursor
          in: query
          description: |
            Offset for items, for pagination. You'll use **next_cursor** from response for this parameter.
          required: false
          schema:
            type: integer
            example: 1672707197212
        - name: sort
          in: query
          description: |
            How do you want to sort these items?
          required: false
          schema:
            type: string
            example: newest_first
            default: newest_first
            enum: [ "newest_first", "oldest_first" ]
      responses:
        200:
          description: Success response.
          links:
            paginate:
              operationId: fetchFeedJson
              parameters:
                next_cursor: $response.body#/_microfeed/items_next_cursor
                sort: $response.body#/_microfeed/items_sort_order
              description: Pagination through items.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FeedJson"
        404:
          description: |
            This microfeed instance's Json feed is disabled by the admin at /admin/settings/
          content:
            text/plain:
              schema:
                type: string
                description: "Not Found"

components:
  schemas:
    FeedJson:
      type: object
      required:
        - version
        - title
        - items
      properties:
        version:
          type: string
          example: "https://jsonfeed.org/version/1.1"
        title:
          type: string
          example: "My Feed"
        description:
          type: string
          example: "A description of my feed"
        home_page_url:
          type: string
          format: uri
          example: "https://example.com"
        feed_url:
          type: string
          format: uri
          example: "https://example.com/feed.json"
        items:
          type: array
          items:
            $ref: "#/components/schemas/FeedItem"
        _microfeed:
          type: object
          properties:
            items_next_cursor:
              type: integer
              example: 1672707197212
            items_sort_order:
              type: string
              enum: ["newest_first", "oldest_first"]
              example: "newest_first"

    FeedItem:
      type: object
      required:
        - id
        - title
        - content_html
        - date_published
      properties:
        id:
          type: string
          example: "2"
        url:
          type: string
          format: uri
          example: "https://example.com/post/2"
        title:
          type: string
          example: "My Second Post"
        content_html:
          type: string
          example: "<p>This is my second post.</p>"
        date_published:
          type: string
          format: date-time
          example: "2023-01-02T15:00:00Z"
        date_modified:
          type: string
          format: date-time
          example: "2023-01-02T15:00:00Z"
        image:
          type: string
          format: uri
          example: "https://example.com/images/post2.jpg"
        tags:
          type: array
          items:
            type: string
          example: ["news", "tech"]
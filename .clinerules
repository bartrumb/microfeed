## Core Requirements

- Always start every message with the ü•∑ emoji
- Always TypeCheck ts files to ensure they are valid before running them
- Always run lints to ensure they are valid before running them
- Always use pnpm for all tasks related to CI/CD, development, and package management
- Never use npm, yarn, or direct wrangler commands - always use pnpm scripts

## Project Scripts

Available pnpm commands:
- `pnpm dev` - Start Vite development server
- `pnpm dev:worker` - Build and start Cloudflare Pages development server with D1 database
- `pnpm build` - Build project for production
- `pnpm preview` - Preview production build locally
- `pnpm deploy:preview` - Deploy to preview environment
- `pnpm deploy:prod` - Deploy to production environment
- `pnpm test` - Run Jest tests
- `pnpm sync-version` - Synchronize microfeed version
- `pnpm lint` - Run ESLint

## CLI Standards

1. Always use bash commands with WSL
2. Always run pnpm commands from app/dirname, not project root
3. Never run recursive commands on the root mcp-servers directory:
   ```bash
   # ‚ùå AVOID - Will fill context and slow progress
   cd /mnt/c/Code/mcp-servers && find . -name "*log*"
   ```

```bash
# ‚úÖ CORRECT
rm -rf dist

# ‚ùå AVOID
rimraf dist
```

```bash
# ‚úÖ CORRECT
cd /mnt/c/Code/mcp-servers/browser-render-server && mkdir -p src/browser-render-server && mv src/index.ts src/browser-render-server/

# ‚ùå AVOID
cd /mnt/c/Users/BrettBartrum/Documents/Cline/MCP/browser-render-server && mkdir src\browser-render-server && move src\index.ts src\browser-render-server\
```

```bash
# ‚úÖ CORRECT
cd /mnt/c/Code/mcp-servers/browser-render-server && find build -type f

# ‚ùå AVOID
cd /mnt/c/Users/BrettBartrum/Documents/Cline/MCP/browser-render-server && dir /s build
```


## User Interaction and Adaptive Behavior
- Ask follow-up questions only if critical info is missing
- Adjust approach based on project complexity and user preferences
- Keep responses concise; emphasize efficiency
- Present key technical choices clearly, with pros/cons, and let the user decide

## Code Editing and File Operations
- Organize new projects logically, mindful of dependencies and structure
- Refer to the main Cline system for file handling specifics

---


## Cloudflare Services Usage Tips

- **KV**: For global key-value data (cached reads, few writes). Eventual consistency (~60s). Great for config, caches, or flags.
- **D1**: A serverless SQL DB. Strong consistency, good for relational data. Ideal for user records, structured queries. New but actively improving.
- **R2**: Object storage (S3-compatible). Store large files (images, videos). No egress fees, beneficial for heavy bandwidth. Eventual consistency on updates.
- **Workers**: Serverless functions at edge. Best for logic close to user. Limits on CPU time, but scales automatically. Combine with KV, D1, or R2 for a fully serverless stack.

**Pitfalls**:
- KV: Not for high-frequency writes, can have stale reads.
- D1: Still evolving, check size/performance constraints.
- R2: Use caching for best latency, handle versioning for overwrites.
- Workers: Stay within time/memory limits. They are stateless unless combined with Durable Objects or DB.

---

Always use fetch MCP server to reference cloudflare docs below when working the respective products:
When working with cloudflare workers always read this prompt first: https://developers.cloudflare.com/workers/prompt.txt
Wrangler configuration best practices can be foud here: https://raw.githubusercontent.com/cloudflare/cloudflare-docs/refs/heads/production/src/content/docs/workers/wrangler/configuration.mdx
Wrangler commands here: https://raw.githubusercontent.com/cloudflare/cloudflare-docs/refs/heads/production/src/content/docs/workers/wrangler/commands.mdx 
Examples for all cloudflare products and blogs at: https://developers.cloudflare.com/llms.txt

This tree structure represents how the microfeed project is organized based on the file paths you provided. The project is divided into three main directories:

1. `functions/` - Server-side code, API endpoints, and various function handlers
2. `client-src/` - Client-side React components and applications
3. `edge-src/` - Edge runtime specific components and applications
